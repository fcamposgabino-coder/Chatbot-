from flask import Flask, render_template, request, jsonify  # type: ignore
from pypdf import PdfReader
from transformers import pipeline

app = Flask(__name__)

# Carrega modelo de resumo (HuggingFace)
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

# P√°gina inicial -> carrega o HTML do chat
@app.route("/")
def index():
    return render_template("index.html")

# Rota do BOT -> recebe mensagem e responde
@app.route("/bot", methods=["POST"])
def bot():
    try:
        dados = request.get_json(force=True)  # for√ßa leitura do JSON
        print("üì• Recebido do usu√°rio:", dados)

        texto_usuario = dados.get("mensagem", "").lower()

        if "oi" in texto_usuario or "ol√°" in texto_usuario:
            resposta = "Oi üëã! Como posso te ajudar?"
        elif "at√© que horas" in texto_usuario:
            resposta = "Nosso atendimento √© de segunda a sexta, das 8h √†s 18h."
        elif "suporte" in texto_usuario:
            resposta = "Voc√™ precisa de suporte t√©cnico ou financeiro?"
        else:
            resposta = "Desculpe, n√£o entendi. Pode reformular?"

        print("üì§ Respondendo:", resposta)
        return jsonify({"resposta": resposta})

    except Exception as e:
        print("‚ùå Erro no backend:", e)
        return jsonify({"resposta": "Erro interno no servidor."}), 500


# üöÄ Nova rota: upload de PDF e resumo
@app.route("/upload", methods=["POST"])
def upload_pdf():
    try:
        if "file" not in request.files:
            return jsonify({"resumo": "Nenhum arquivo enviado."})

        file = request.files["file"]

        if file.filename == "":
            return jsonify({"resumo": "Arquivo inv√°lido."})

        # L√™ o PDF
        pdf = PdfReader(file)
        texto = ""
        for page in pdf.pages:
            page_text = page.extract_text()
            if page_text:
                texto += page_text + " "

        if not texto.strip():
            return jsonify({"resumo": "N√£o consegui extrair texto desse PDF."})

        # Limita o tamanho para n√£o travar o modelo
        if len(texto) > 2000:
            texto = texto[:2000]

        # Resumir com HuggingFace
        resumo = summarizer(texto, max_length=150, min_length=50, do_sample=False)

        return jsonify({"resumo": resumo[0]["summary_text"]})

    except Exception as e:
        print("‚ùå Erro ao processar PDF:", e)
        return jsonify({"resumo": "Erro ao processar PDF."}), 500


if __name__ == "__main__":
    
    app.run(debug=True)


